// <auto-generated />
using System;
using MeetAppApi.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MeetAppApi.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MeetAppApi.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("MeetAppApi.Models.CartEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfTicket")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("EventId");

                    b.ToTable("CartEvent");
                });

            modelBuilder.Entity("MeetAppApi.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MeetAppApi.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOnSale")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfTickets")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("TicketPrice")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("MeetAppApi.Models.EventCategory", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("EventId", "CategoryId");

                    b.ToTable("EventCategory");
                });

            modelBuilder.Entity("MeetAppApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2025, 4, 26, 15, 35, 9, 9, DateTimeKind.Local).AddTicks(9163),
                            Email = "ensar.atc@gmail.com",
                            FirstName = "Ensar",
                            HashedPassword = "$2a$11$LyxGNhh7zOjuXsAUADPPuOjUf9TOfY6ZyrQWS5w5JDxxIce1bjNzG",
                            LastName = "Atıcı",
                            Location = "Erzincan/TR",
                            Role = 1,
                            UserName = "ensaratc_"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2025, 4, 26, 15, 35, 9, 9, DateTimeKind.Local).AddTicks(9182),
                            Email = "john@hotmail.com",
                            FirstName = "John",
                            HashedPassword = "$2a$11$2R/5Qa1DSy1dOhHoz/AUq.fzDo4Lm2tvIZ3Oy4VByx4A7Hlr5Nm6a",
                            LastName = "Doe",
                            Location = "Washington/US",
                            Role = 0,
                            UserName = "john_doe"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2025, 4, 26, 15, 35, 9, 9, DateTimeKind.Local).AddTicks(9184),
                            Email = "yıldız@gmail.com",
                            FirstName = "Ahmet",
                            HashedPassword = "$2a$11$2p9.Fze7oWvFrY9R5hLG8OwRwYBD406NHeobDq91aMKuckovefH56",
                            LastName = "Yıldız",
                            Location = "Ankara/TR",
                            Role = 0,
                            UserName = "Yıldız_1903"
                        });
                });

            modelBuilder.Entity("MeetAppApi.Models.Cart", b =>
                {
                    b.HasOne("MeetAppApi.Models.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("MeetAppApi.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MeetAppApi.Models.CartEvent", b =>
                {
                    b.HasOne("MeetAppApi.Models.Cart", "Cart")
                        .WithMany("Events")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeetAppApi.Models.Event", "Event")
                        .WithMany("Carts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("MeetAppApi.Models.EventCategory", b =>
                {
                    b.HasOne("MeetAppApi.Models.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeetAppApi.Models.Event", "Event")
                        .WithMany("Categories")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("MeetAppApi.Models.Cart", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("MeetAppApi.Models.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("MeetAppApi.Models.Event", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("MeetAppApi.Models.User", b =>
                {
                    b.Navigation("Cart");
                });
#pragma warning restore 612, 618
        }
    }
}
